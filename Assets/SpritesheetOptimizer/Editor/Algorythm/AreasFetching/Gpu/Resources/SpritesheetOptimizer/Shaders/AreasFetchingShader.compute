struct areaStruct
{
	int SpriteIndex;
	int XAndY; //Экономим место, т.к. эти буфферы тянут на сотни мегабайт...
	int WidthAndHeight;
};

struct registryStruct
{
	int SpritesDataOffset; //С какой позиции в буффере data начинается данный спрайт
	int WidthAndHeight;
};

RWStructuredBuffer<registryStruct> RegistryBuffer;
RWStructuredBuffer<areaStruct> AreasBuffer;
RWStructuredBuffer<int> DataBuffer;
RWStructuredBuffer<int> ResultBuffer;

int Divider; //Чтобы нам хватило места в int для score
int AreasCount; //Чтобы знать где остановиться
int SpritesCount; //По идее можно, наверное, взять из RegistryBuffer, но, даже если можно, быстрее закешировать.

int SpriteStartIndex;
int SpriteEndIndex;

//int TestValue1;
//int TestValue2;

int getScoreFromSprite(registryStruct spriteInfo, int areaSpriteOffset, int areaSpriteWidth, int areaX, int areaY, int areaWidth, int areaHeight)
{
	int result = 0;

	int spriteOffset = spriteInfo.SpritesDataOffset;
	int spriteWidth = spriteInfo.WidthAndHeight >> 16 & 65535;
	int spriteHeight = spriteInfo.WidthAndHeight & 65535;

	int spriteLastX = spriteWidth - areaWidth;
	int spriteLastY = spriteHeight - areaHeight;

	//TestValue2 += areaX + areaY + areaWidth + areaHeight;

	for (int spriteX = 0; spriteX < spriteLastX; spriteX++)
	{
		for (int spriteY = 0; spriteY < spriteLastY; spriteY++)
		{
			bool maybeThis = true;

			for (int x = 0; x < areaWidth; x++)
			{
				for (int y = 0; y < areaHeight; y++)
				{
					//TestValue2++;
					int sampleX = areaX + x;
					int sampleY = areaY + y;
					int candidateX = spriteX + x;
					int candidateY = spriteY + y;

					int sampleColor = DataBuffer[areaSpriteOffset + sampleX * areaSpriteWidth + sampleY];
					//TestValue1 += sampleColor;
					int candidateColor = DataBuffer[spriteOffset + candidateX * spriteWidth + candidateY];
					//TestValue2 += candidateColor; 
					if (sampleColor != candidateColor)
					{
						maybeThis = false;
						break;
					}
				}

				if (!maybeThis)
					break;
			}

			if (maybeThis)
				result++;
		}
	}

	return result;
}

#pragma kernel CSMain
[numthreads(512, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	/*TestValue1 = 0;
	TestValue2 = 0;*/

	areaStruct area = AreasBuffer[id.x];
	int areaX = area.XAndY >> 16 & 65535;
	int areaY = area.XAndY & 65535;
	int areaWidth = area.WidthAndHeight >> 16 & 65535;
	int areaHeight = area.WidthAndHeight & 65535;

	registryStruct spriteInfo = RegistryBuffer[area.SpriteIndex];
	int areaSpriteWidth = spriteInfo.WidthAndHeight >> 16 & 65535;
	int areaspriteHeight = spriteInfo.WidthAndHeight & 65535;
	int areaSpriteOffset = spriteInfo.SpritesDataOffset;

	int opaquePizels = 0;
	for (int x = 0; x < areaWidth; x++)
	{
		for (int y = 0; y < areaHeight; y++)
		{
			int xx = x + areaX;
			int yy = y + areaY;
			int color = DataBuffer[areaSpriteOffset + xx * areaSpriteWidth + yy];
			int a = color & 255;
			if (a != 0)
				opaquePizels++;
		}
	}

	float square = areaWidth * areaHeight;
	int singleScore = opaquePizels * opaquePizels * opaquePizels / square;

	int coincidentsCount = 0;
	for (int i = SpriteStartIndex; i < SpriteEndIndex && i < SpritesCount; i++)
	{
		registryStruct currentSpriteInfo = RegistryBuffer[i];
		coincidentsCount += getScoreFromSprite(currentSpriteInfo, areaSpriteOffset, areaSpriteWidth, areaX, areaY, areaWidth, areaHeight);
	}

	ResultBuffer[id.x] = coincidentsCount * singleScore;
	/*

	int radiusX = PreferredAreaWidth / 2;
	int radiusY = PreferredAreaHeight / 2;

	if (id.x >= SpriteWidth)
		return;
	if (id.y >= SpriteHeight)
		return;

	int xStart = id.x - radiusX;
	int yStart = id.y - radiusY;
	if (xStart < 0)
		xStart = 0;
	if (yStart < 0)
		yStart = 0;
	int xMax = id.x + radiusX;
	int yMax = id.y + radiusY;
	if (xMax > SpriteWidth)
		xMax = SpriteWidth;
	if (yMax > SpriteHeight)
		yMax = SpriteHeight;

	int width = xMax - xStart;
	int height = yMax - yStart;
	float divider = width * height;
	float r = 0;
	float g = 0;
	float b = 0;
	float a = 0;

	for (int x = xStart; x < xMax; x++)
	{
		for (int y = yStart; y < yMax; y++)
		{
			int i = x * MultipliedValue + y;
			int value = SpriteBuffer[i];
			r += (value & 255) / divider;
			g += ((value >> 8) & 255) / divider;
			b += ((value >> 16) & 255) / divider;
			a += ((value >> 24) & 255) / divider;
		}
	}

	int ir = r;
	ir = ir & 255;
	int ig = g;
	ig = ig & 255;
	int ib = b;
	ib = ib & 255;
	int ia = a;
	ia = ia & 255;

	int j = id.x * MultipliedValue + id.y;
	ResultBuffer[j] = ir | (ig << 8) | (ib << 16) | (ia << 24);*/
}
