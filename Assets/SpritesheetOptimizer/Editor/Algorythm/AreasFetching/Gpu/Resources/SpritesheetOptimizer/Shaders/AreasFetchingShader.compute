struct areaStruct
{
	int MetaAndSpriteIndex; //Для индекса спрайта вполне хватит и трех байт. Даже двух, я думаю, хватило бы. Поэтому 1й байт - для мета-информации
	int XAndY; //Экономим место, т.к. эти буфферы тянут на сотни мегабайт...
	int WidthAndHeight;
};

struct registryStruct
{
	int SpritesDataOffset; //С какой позиции в буффере data начинается данный спрайт
	int WidthAndHeight;
};

struct taskStruct
{
	int MetaAndSpriteIndex; //Целый int для 1 бита данных выделать слишком жирно, поэтому spriteIndex потеснится
	int SpriteXAndY;
	int XAndY;
};

RWStructuredBuffer<taskStruct> TasksBuffer;
RWStructuredBuffer<registryStruct> RegistryBuffer;
RWStructuredBuffer<areaStruct> AreasBuffer;
RWStructuredBuffer<int> DataBuffer;
RWStructuredBuffer<int> ResultBuffer;

//int Divider; //Чтобы нам хватило места в int для score
//int AreasCount; //Чтобы знать где остановиться
int SpritesCount; //По идее можно, наверное, взять из RegistryBuffer, но, даже если можно, быстрее закешировать.

int MaxOpsAllowed;
int CurrentOpsCount;

int _currentSpriteX;
int _currentSpriteY;
int _currentX;
int _currentY;

//int SpriteStartIndex;
//int SpriteEndIndex;



int TestValue1;
//int TestValue2;

int getScoreFromSprite(registryStruct spriteInfo, int currentSpriteX, int currentSpriteY, int currentAreaX, int currentAreaY, int currentOpsCount, int areaSpriteOffset, int areaSpriteWidth, int areaX, int areaY, int areaWidth, int areaHeight)
{
	int result = 0;

	int spriteOffset = spriteInfo.SpritesDataOffset;
	int spriteWidth = spriteInfo.WidthAndHeight >> 16 & 65535;
	int spriteHeight = spriteInfo.WidthAndHeight & 65535;

	int spriteLastX = spriteWidth - areaWidth;
	int spriteLastY = spriteHeight - areaHeight;

	//TestValue2 += areaX + areaY + areaWidth + areaHeight;
	int opsCount = currentOpsCount;

	for (int spriteX = currentSpriteX; spriteX < spriteLastX; spriteX++)
	{
		for (int spriteY = currentSpriteY; spriteY < spriteLastY; spriteY++)
		{
			TestValue1++;
			bool maybeThis = true;

			for (int x = currentAreaX; x < areaWidth; x++)
			{
				for (int y = currentAreaY; y < areaHeight; y++)
				{
					opsCount++;
					if (opsCount > MaxOpsAllowed)
					{
						_currentSpriteX = spriteX;
						_currentSpriteY = spriteY;
						_currentX = x;
						_currentY = y;

						break;
					}
					//TestValue2++;
					int sampleX = areaX + x;
					int sampleY = areaY + y;
					int candidateX = spriteX + x;
					int candidateY = spriteY + y;

					int sampleColor = DataBuffer[areaSpriteOffset + sampleX * areaSpriteWidth + sampleY];
					//TestValue1 += sampleColor;
					int candidateColor = DataBuffer[spriteOffset + candidateX * spriteWidth + candidateY];
					//TestValue2 += candidateColor; 
					if (sampleColor != candidateColor)
					{
						maybeThis = false;
						break;
					}
				}

				if (opsCount > MaxOpsAllowed)
					break;
				if (!maybeThis)
					break;
			}

			currentAreaX = 0;
			currentAreaY = 0;

			if (opsCount > MaxOpsAllowed)
				break;
			if (maybeThis)
				result++;
		}
		if (opsCount > MaxOpsAllowed)
			break;

		currentSpriteY = 0;
	}

	if (opsCount <= MaxOpsAllowed)
	{
		_currentSpriteX = 0;
		_currentSpriteY = 0;
		_currentX = 0;
		_currentY = 0;
	}
	CurrentOpsCount = opsCount;

	return result;
}

#pragma kernel CSMain
[numthreads(512, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	TestValue1 = 0;
	/*TestValue2 = 0;*/

	areaStruct area = AreasBuffer[id.x];
	//ResultBuffer[id.x] = 11;

	int meta = area.MetaAndSpriteIndex >> 24 & 255;
	if (meta == 0) //Если область уже использована, ее на недо считать
	{
		ResultBuffer[id.x] = 0;
		return;
	}

	taskStruct formerTask = TasksBuffer[id.x];

	int taskMeta = formerTask.MetaAndSpriteIndex >> 24 & 255;
	if (taskMeta == 0) //Если эту область закончили считать - тоже не надо считать (удивительно!)
	{
		ResultBuffer[id.x] = 0;
		return;
	}

	int areaSpriteIndex = area.MetaAndSpriteIndex & 16777215;

	int areaX = area.XAndY >> 16 & 65535;
	int areaY = area.XAndY & 65535;
	int areaWidth = area.WidthAndHeight >> 16 & 65535;
	int areaHeight = area.WidthAndHeight & 65535;

	registryStruct areaSpriteInfo = RegistryBuffer[areaSpriteIndex];
	int areaSpriteWidth = areaSpriteInfo.WidthAndHeight >> 16 & 65535;
	int areaspriteHeight = areaSpriteInfo.WidthAndHeight & 65535;
	int areaSpriteOffset = areaSpriteInfo.SpritesDataOffset;

	int opaquePizels = 0;
	for (int x = 0; x < areaWidth; x++)
	{
		for (int y = 0; y < areaHeight; y++)
		{
	 		int xx = x + areaX;
			int yy = y + areaY;
			int color = DataBuffer[areaSpriteOffset + xx * areaSpriteWidth + yy];
			int a = color & 255;
			if (a != 0)
				opaquePizels++;
		}
	}

	int square = areaWidth * areaHeight;
	int singleScore = (opaquePizels * opaquePizels * opaquePizels) / square;

	int coincidentsCount = 0;

	int currentSpriteIndex = formerTask.MetaAndSpriteIndex & 16777215;
	_currentSpriteX = formerTask.SpriteXAndY >> 16 & 65535;
	_currentSpriteY = formerTask.SpriteXAndY & 65535;
	_currentX = formerTask.XAndY >> 16 & 65535;
	_currentY = formerTask.XAndY & 65535;

	for (int i = currentSpriteIndex; i < SpritesCount; i++)
	{
		registryStruct currentSpriteInfo = RegistryBuffer[i];

		coincidentsCount += getScoreFromSprite(currentSpriteInfo, _currentSpriteX, _currentSpriteY, _currentX, _currentY, CurrentOpsCount, areaSpriteOffset, areaSpriteWidth, areaX, areaY, areaWidth, areaHeight);
		if (CurrentOpsCount > MaxOpsAllowed)
		{
			formerTask.MetaAndSpriteIndex = 1 << 24 | i;
			formerTask.SpriteXAndY = _currentSpriteX << 16 | _currentSpriteY;
			formerTask.XAndY = _currentX << 16 | _currentY;
			TasksBuffer[id.x] = formerTask;
			break;
		}
	}
	if (CurrentOpsCount <= MaxOpsAllowed)
	{	//Сообщаем, что закончили и обнуляем
		formerTask.MetaAndSpriteIndex = 0 << 24 | 0;
		formerTask.SpriteXAndY = 0;
		formerTask.XAndY = 0;
		TasksBuffer[id.x] = formerTask;
	}

	ResultBuffer[id.x] = coincidentsCount * singleScore;
	//ResultBuffer[id.x] = 11;
}
