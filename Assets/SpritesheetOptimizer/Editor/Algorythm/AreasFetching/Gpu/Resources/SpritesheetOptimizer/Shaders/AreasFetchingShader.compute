struct areaStruct
{
	int SpriteIndex;
	int XAndY; //Экономим место, т.к. эти буфферы тянут на сотни мегабайт...
	int WidthAndHeight;
};

struct registryStruct
{
	int SpritesDataOffset; //С какой позиции в буффере data начинается данный спрайт
	int WidthAndHeight;
};

RWStructuredBuffer<registryStruct> RegistryBuffer;
RWStructuredBuffer<areaStruct> AreasBuffer;
RWStructuredBuffer<int> DataBuffer;
RWStructuredBuffer<int> ResultBuffer;

int Divider; //Чтобы нам хватило места в int для score
int AreasCount; //Чтобы знать где остановиться

#pragma kernel CSMain
[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	areaStruct area = AreasBuffer[id.x];
	int areaX = area.XAndY >> 16 & 65535;
	int areaY = area.XAndY & 65535;
	int areaWidth = area.WidthAndHeight >> 16 & 65535;
	int areaHeight = area.WidthAndHeight & 65535;

	registryStruct spriteInfo = RegistryBuffer[area.SpriteIndex];
	int spriteWidth = spriteInfo.WidthAndHeight >> 16 & 65535;
	int spriteHeight = spriteInfo.WidthAndHeight & 65535;
	int spriteOffset = spriteInfo.SpritesDataOffset;

	int opaquePizels = 0;
	for (int x = 0; x < areaWidth; x++)
	{
		for (int y = 0; y < areaHeight; y++)
		{
			int xx = x + areaX;
			int yy = y + areaY;
			int color = DataBuffer[spriteOffset + xx * spriteWidth + yy];
			int a = color & 255;
			if (a != 0)
				opaquePizels++;
		}
	}

	ResultBuffer[id.x] = opaquePizels;/*

	int radiusX = PreferredAreaWidth / 2;
	int radiusY = PreferredAreaHeight / 2;

	if (id.x >= SpriteWidth)
		return;
	if (id.y >= SpriteHeight)
		return;

	int xStart = id.x - radiusX;
	int yStart = id.y - radiusY;
	if (xStart < 0)
		xStart = 0;
	if (yStart < 0)
		yStart = 0;
	int xMax = id.x + radiusX;
	int yMax = id.y + radiusY;
	if (xMax > SpriteWidth)
		xMax = SpriteWidth;
	if (yMax > SpriteHeight)
		yMax = SpriteHeight;

	int width = xMax - xStart;
	int height = yMax - yStart;
	float divider = width * height;
	float r = 0;
	float g = 0;
	float b = 0;
	float a = 0;

	for (int x = xStart; x < xMax; x++)
	{
		for (int y = yStart; y < yMax; y++)
		{
			int i = x * MultipliedValue + y;
			int value = SpriteBuffer[i];
			r += (value & 255) / divider;
			g += ((value >> 8) & 255) / divider;
			b += ((value >> 16) & 255) / divider;
			a += ((value >> 24) & 255) / divider;
		}
	}

	int ir = r;
	ir = ir & 255;
	int ig = g;
	ig = ig & 255;
	int ib = b;
	ib = ib & 255;
	int ia = a;
	ia = ia & 255;

	int j = id.x * MultipliedValue + id.y;
	ResultBuffer[j] = ir | (ig << 8) | (ib << 16) | (ia << 24);*/
}
