struct registryStruct
{
	int SpritesDataOffset; //С какой позиции в буффере data начинается данный спрайт
	int WidthAndHeight;
};

struct taskStruct
{
	int MetaAndSpriteIndex; //Целый int для 1 бита данных выделать слишком жирно, поэтому spriteIndex потеснится
	int SpriteXAndY;
	int XAndY;
	int AreasCounter; //Счетчик для областей - если встретили такую же область, не дойдя до id.x, мы - повтор.
};

struct areaStruct //нам все равно нужны области с самого начала, т.к. мы изнутри никак не можем точно сказать какую область нам обрабатывать, т.к. спрайты могут быть разных размеров
{
	int MetaAndSpriteIndex; //Для индекса спрайта вполне хватит и трех байт. Даже двух, я думаю, хватило бы. Поэтому 1й байт - для мета-информации
	int XAndY; //Экономим место, т.к. эти буфферы тянут на сотни мегабайт...
	int WidthAndHeight;
};

RWStructuredBuffer<taskStruct> TasksBuffer;
RWStructuredBuffer<registryStruct> RegistryBuffer; //Регистр картинок
RWStructuredBuffer<areaStruct> AreasBuffer;
RWStructuredBuffer<int> DataBuffer; //Цвета спрайтов
RWStructuredBuffer<int> CountsBuffer; //Count, 0 - это пустая область или повтор, в общем надо игнорить.
RWStructuredBuffer<int> ScoresBuffer; //Счет области - зачем считать на проце?

int MaxOpsAllowed;
int SpritesCount; //По идее можно, наверное, взять из RegistryBuffer, но, даже если можно, быстрее закешировать.

int3 processSprite(int idx, int spriteIndex, registryStruct spriteInfo, int currentOpsCount, int areaSpriteOffset, int areaSpriteWidth, int areaX, int areaY, int areaWidth, int areaHeight)
{
	int count = 0;
	int opsCountResult = currentOpsCount;
	int weAreReapeatingResult = 0; //Флаг обозначающий, что мы - повтор

	int spriteOffset = spriteInfo.SpritesDataOffset;
	int spriteWidth = spriteInfo.WidthAndHeight >> 16 & 65535;
	int spriteHeight = spriteInfo.WidthAndHeight & 65535;

	int spriteLastX = spriteWidth - areaWidth;
	int spriteLastY = spriteHeight - areaHeight;

	taskStruct task = TasksBuffer[idx];
	int currentSpriteX = task.SpriteXAndY >> 16 & 65535;
	int currentSpriteY = task.SpriteXAndY & 65535;
	int currentAreaX = task.XAndY >> 16 & 65535;
	int currentAreaY = task.XAndY & 65535;

	for (int spriteX = currentSpriteX; spriteX < spriteLastX; spriteX++)
	{
		for (int spriteY = currentSpriteY; spriteY < spriteLastY; spriteY++)
		{
			bool maybeThis = true;

			for (int x = currentAreaX; x < areaWidth; x++)
			{
				for (int y = currentAreaY; y < areaHeight; y++)
				{
					opsCountResult++;

					//Мы не закончили с этим спрайтом, но у нас уже не осталось доступных операций, так что сохраняем снапшот состояния и выходим из цикла.
					if (opsCountResult > MaxOpsAllowed)
					{
						task.MetaAndSpriteIndex = 1 << 24 | spriteIndex;
						task.SpriteXAndY = spriteX << 16 | spriteY;
						task.XAndY = x << 16 | y;

						break;
					}
					int sampleX = areaX + x;
					int sampleY = areaY + y;
					int candidateX = spriteX + x;
					int candidateY = spriteY + y;

					int sampleColor = DataBuffer[areaSpriteOffset + sampleX * areaSpriteWidth + sampleY];
					int candidateColor = DataBuffer[spriteOffset + candidateX * spriteWidth + candidateY];
					if (sampleColor != candidateColor)
					{
						maybeThis = false;
						break;
					}
				}

				currentAreaY = 0;

				if (opsCountResult > MaxOpsAllowed)
					break;
				if (!maybeThis)
					break;
			}

			currentAreaX = 0;

			if (opsCountResult > MaxOpsAllowed)
				break;
			else
			if (maybeThis)
			{
				if (task.AreasCounter >= idx)
					count++;
				else
				{
					weAreReapeatingResult = 1;
					break;
				}
			}

			task.AreasCounter++;
		}

		currentSpriteY = 0;

		if (opsCountResult > MaxOpsAllowed || weAreReapeatingResult == 1)
			break;
	}

	//Если закончили этот спрайт и у нас еще остались операции в запасе - мы можем работать со следующим спрайтом (если он есть (мы не знаем)), начиная с нулевых координат.
	if (opsCountResult <= MaxOpsAllowed)
	{
		task.SpriteXAndY = 0;
		task.XAndY = 0;
	}

	TasksBuffer[idx] = task;

	int3 resultVector = { count, opsCountResult, weAreReapeatingResult };
	/*resultVector[0] = count;
	resultVector[1] = opsCountResult;
	resultVector[2] = weAreReapeatingResult;*/
	return resultVector;
}

#pragma kernel CSMain
[numthreads(512, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	areaStruct area = AreasBuffer[id.x];

	int meta = area.MetaAndSpriteIndex >> 24 & 255;
	if (meta == 0) //Мета области равна 0, если она пустая или если она - повтор.
	{
		//CountsBuffer[id.x] = 1;
		return;
	}

	taskStruct formerTask = TasksBuffer[id.x];

	int taskMeta = formerTask.MetaAndSpriteIndex >> 24 & 255;
	if (taskMeta == 0) //Мета задачи - это про то, закончили мы ее обсчитывать или нет: если закончили - выходим.
	{
		//CountsBuffer[id.x] = 2;
		return;
	}

	int areaSpriteIndex = area.MetaAndSpriteIndex & 16777215;

	int areaX = area.XAndY >> 16 & 65535;
	int areaY = area.XAndY & 65535;
	int areaWidth = area.WidthAndHeight >> 16 & 65535;
	int areaHeight = area.WidthAndHeight & 65535;

	registryStruct areaSpriteInfo = RegistryBuffer[areaSpriteIndex];
	int areaSpriteOffset = areaSpriteInfo.SpritesDataOffset;
	int areaSpriteWidth = areaSpriteInfo.WidthAndHeight >> 16 & 65535;
	//int areaSpriteHeight = areaSpriteInfo.WidthAndHeight & 65535;

	int singleScore = ScoresBuffer[id.x];
	if (singleScore == 0) //Если счет равен 0, возможен только 1 вариант - это первый проход и мы еще ни разу не считали счет. Потому что если считали он либо не 0 либо мы давно вышли по мете области
	{
		int opaquePixels = 0;
		for (int x = 0; x < areaWidth; x++)
		{
			for (int y = 0; y < areaHeight; y++)
			{
				int xx = x + areaX;
				int yy = y + areaY;
				int color = DataBuffer[areaSpriteOffset + xx * areaSpriteWidth + yy];
				int a = color & 255;
				if (a != 0)
					opaquePixels++;
			}
		}

		float square = areaWidth * areaHeight;
		singleScore = opaquePixels * opaquePixels * opaquePixels / square;
		if (singleScore == 0)
		{
			area.MetaAndSpriteIndex = 0 << 24 | areaSpriteIndex; //Область пустая - помечаем это в мете области
			formerTask.MetaAndSpriteIndex = 0 << 24 | 0;	//Если область пустая, мы должны как-то дать понять внешнему миру, что данный тред закончил работу. Мы могли бы 
															//после каждого диспатча каждый раз забирать буффер областей и проверять если данная область пустая, или повторная, 
															//а не только то, что мы с ней закончили, но это целый GetData ради 1 бита информации. Лучше уже пусть будет, что,
															//если область пустая или повторная, это то же самое как если бы мы с ней закончили работать. Думаю, это даже и 
															//логично.
			AreasBuffer[id.x] = area;
			TasksBuffer[id.x] = formerTask;
			//CountsBuffer[id.x] = 3;
			return;
		}
		//Получили счет области - сохраняем
		ScoresBuffer[id.x] = singleScore;
	}

	//Ок, теперь мы проходимся по всем областям и смотрим уникальные ли они и считаем их кол-во

	int coincidentsCount = 0;
	int currentSpriteIndex = formerTask.MetaAndSpriteIndex & 16777215;

	int currentOpsCount = 0;

	for (int i = currentSpriteIndex; i < SpritesCount; i++)
	{
		registryStruct currentSpriteInfo = RegistryBuffer[i];

		int3 result = processSprite(id.x, i, currentSpriteInfo, currentOpsCount, areaSpriteOffset, areaSpriteWidth, areaX, areaY, areaWidth, areaHeight);

		coincidentsCount += result[0];
		currentOpsCount = result[1];
		int weAreRepeating = result[2];

		if (weAreRepeating == 1)
		{
			//Тут тоже - если мы повторяемся, то надо заодно еще и таск пометить как завершенный.
			area.MetaAndSpriteIndex = 0 << 24 & areaSpriteIndex;
			formerTask.MetaAndSpriteIndex = 0 << 24 | 0;
			AreasBuffer[id.x] = area;
			TasksBuffer[id.x] = formerTask;
			ScoresBuffer[id.x] = 0; //Даже если там не 0, у повторов должно быть 0 как флаг пропустить эту область.
			return; //Завершать незачем - выходим.
		}
		if (currentOpsCount > MaxOpsAllowed)
			break;
	}

	//Мы закончили со всеми спрайтами и уложились в доступное кол-во операций (может быть, впритык), так что можем сообщать, что закончили.
	if (currentOpsCount <= MaxOpsAllowed)
	{
		formerTask = TasksBuffer[id.x];
		formerTask.MetaAndSpriteIndex = 0 << 24 | 0;
		TasksBuffer[id.x] = formerTask;
		////Тут тоже - если мы закончили, то надо заодно еще и таск пометить как завершенный.
		//area.MetaAndSpriteIndex = 0 << 24 & areaSpriteIndex;
		//AreasBuffer[id.x] = area;
	}

	//CountsBuffer[id.x] = 4;
	CountsBuffer[id.x] = coincidentsCount;
}